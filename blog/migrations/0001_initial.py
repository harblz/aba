# Generated by Django 5.1.1 on 2024-10-10 01:42

import django.db.models.deletion
import django.utils.timezone
import django_ckeditor_5.fields
import taggit.managers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        (
            "taggit",
            "0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx",
        ),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "category_name",
                    models.CharField(default="Default Category", max_length=75),
                ),
                (
                    "category_description",
                    django_ckeditor_5.fields.CKEditor5Field(null=True),
                ),
            ],
            options={
                "verbose_name_plural": "Categories",
            },
        ),
        migrations.CreateModel(
            name="Post",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("text", django_ckeditor_5.fields.CKEditor5Field()),
                (
                    "pic",
                    models.CharField(
                        blank=True,
                        help_text="This is the 'splash' picture that will be shown to the user as a header for each post. You can leave it blank. FOR POSTS SERVED UP ON THE SITE, THEY SHOULD START WITH /static/img/",
                        max_length=200,
                        null=True,
                    ),
                ),
                ("slug", models.CharField(max_length=200)),
                ("meta", models.CharField(max_length=1000, null=True)),
                (
                    "snippet_size",
                    models.IntegerField(
                        default=150,
                        help_text="The snippet_size determines how much of a text to 'preview' before the post shows the 'read more' button",
                    ),
                ),
                (
                    "is_pinned",
                    models.BooleanField(
                        blank=True,
                        help_text="Pinning a blog post makes it stick to the 'pinned items' bar on the front page of the site. Try not to pin too many posts because it'll look crazy",
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("d", "Draft"),
                            ("p", "Published"),
                            ("w", "Withdrawn"),
                        ],
                        max_length=1,
                    ),
                ),
                (
                    "created_date",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("published_date", models.DateTimeField(blank=True, null=True)),
                ("page_views", models.IntegerField(default=0)),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        default=0,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="blog.category",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
            ],
        ),
    ]
